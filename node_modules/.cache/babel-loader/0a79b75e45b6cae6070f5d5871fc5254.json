{"ast":null,"code":"export const createUser = async newUser => {\n  const url = 'https://picasso-database.herokuapp.com/api/v1/users';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newUser)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('User could not be created at this time.');\n  }\n\n  return response.json();\n};\nexport const savePalette = async newPalette => {\n  const catalogId = newPalette.catalogId,\n        id = newPalette.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPalette)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Palette could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const saveCatalog = async newCatalog => {\n  const userId = newCatalog.userId,\n        id = newCatalog.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newCatalog)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Catalog could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const getCatalogs = async userInfo => {\n  const id = userInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${id}/catalogs`;\n  const response = await fetch(url);\n  const catalogs = response.json();\n\n  if (!response.ok) {\n    throw new Error('Catalogs could not be retrieved at this time.');\n  }\n\n  return catalogs;\n};\nexport const getCatalog = async catalogInfo => {\n  const userId = catalogInfo.userId,\n        id = catalogInfo.id,\n        catalogName = catalogInfo.catalogName;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n  const response = await fetch(url);\n  const catalog = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`);\n  }\n\n  return catalog;\n};\nexport const getPalettes = async catalogInfo => {\n  const user_id = catalogInfo.user_id,\n        id = catalogInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}/palettes`;\n  const response = await fetch(url);\n  const palettes = response.json();\n\n  if (!response.ok) {\n    throw new Error('Palettes could not be retrieved at this time.');\n  }\n\n  return palettes;\n};\nexport const getPalette = async paletteInfo => {\n  const catalogId = paletteInfo.catalogId,\n        id = paletteInfo.id,\n        paletteName = paletteInfo.paletteName;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const response = await fetch(url);\n  const palette = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your palette \"${paletteName}\" could not be retrieved at this time. :(`);\n  }\n\n  return palette;\n};\nexport const userLogin = async userLogin => {\n  console.log('userLogin', userLogin);\n  const url = 'https://picasso-database.herokuapp.com/api/v1/login';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userLogin)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return response.json();\n};\nexport default userLogin;","map":{"version":3,"sources":["/Users/edwin/dev/picasso/picasso-fe/src/util/apiCalls.js"],"names":["createUser","newUser","url","options","method","headers","body","JSON","stringify","response","fetch","ok","Error","json","savePalette","newPalette","catalogId","id","saveCatalog","newCatalog","userId","getCatalogs","userInfo","catalogs","getCatalog","catalogInfo","catalogName","catalog","getPalettes","user_id","palettes","getPalette","paletteInfo","paletteName","palette","userLogin","console","log"],"mappings":"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","sourcesContent":["export const createUser = async newUser => {\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/users';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newUser)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('User could not be created at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const savePalette = async newPalette => {\n\tconst { catalogId, id } = newPalette;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newPalette)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Palette could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const saveCatalog = async newCatalog => {\n\tconst { userId, id } = newCatalog;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newCatalog)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Catalog could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const getCatalogs = async userInfo => {\n\tconst { id } = userInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${id}/catalogs`;\n\tconst response = await fetch(url);\n\tconst catalogs = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error('Catalogs could not be retrieved at this time.');\n\t}\n\treturn catalogs;\n};\n\nexport const getCatalog = async catalogInfo => {\n\tconst { userId, id, catalogName } = catalogInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n\tconst response = await fetch(url);\n\tconst catalog = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn catalog;\n};\n\nexport const getPalettes = async catalogInfo => {\n\tconst { user_id, id } = catalogInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}/palettes`;\n\tconst response = await fetch(url);\n\tconst palettes = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error('Palettes could not be retrieved at this time.');\n\t}\n\treturn palettes;\n};\n\nexport const getPalette = async paletteInfo => {\n\tconst { catalogId, id, paletteName } = paletteInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst response = await fetch(url);\n\tconst palette = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your palette \"${paletteName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn palette;\n};\n\nexport const userLogin = async userLogin => {\n\tconsole.log('userLogin', userLogin);\n\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/login';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(userLogin)\n\t};\n\tconst response = await fetch(url, options);\n\n\tif (!response.ok) {\n\t\treturn response;\n\t}\n\treturn response.json();\n};\n\nexport default userLogin;\n"]},"metadata":{},"sourceType":"module"}
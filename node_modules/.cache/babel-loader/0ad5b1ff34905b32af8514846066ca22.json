{"ast":null,"code":"import { cleanColorName } from './cleanerFunctions.js';\nexport const createUser = async newUser => {\n  const url = 'https://picasso-database.herokuapp.com/api/v1/users';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newUser)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return response.json();\n};\nexport const createPalette = async newPalette => {\n  const catalog_id = newPalette.catalog_id,\n        user_id = newPalette.user_id,\n        paletteName = newPalette.paletteName,\n        colorsToString = newPalette.colorsToString;\n  let colors = JSON.stringify(colorsToString);\n  const newPaletteForDB = {\n    catalog_id,\n    paletteName,\n    colors\n  };\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${catalog_id}/palettes`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPaletteForDB)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return response.json();\n};\nexport const savePalette = async newPalette => {\n  const catalogId = newPalette.catalogId,\n        id = newPalette.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPalette)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Palette could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const saveCatalog = async newCatalog => {\n  const user_id = newCatalog.user_id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newCatalog)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Catalog could not be saved at this time.');\n  }\n\n  return response;\n};\nexport const getCatalogs = async userInfo => {\n  const id = userInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${id}/catalogs`;\n  const response = await fetch(url);\n  const catalogs = response.json();\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return catalogs;\n};\nexport const getCatalog = async catalogInfo => {\n  const userId = catalogInfo.userId,\n        id = catalogInfo.id,\n        catalogName = catalogInfo.catalogName;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n  const response = await fetch(url);\n  const catalog = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`);\n  }\n\n  return catalog;\n};\nexport const getPalettes = async catalogInfo => {\n  const user_id = catalogInfo.user_id,\n        id = catalogInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}/palettes`;\n  const response = await fetch(url);\n  const palettes = response.json();\n\n  if (!response.ok) {\n    return palettes;\n  }\n\n  return palettes;\n};\nexport const getPalette = async paletteInfo => {\n  const catalogId = paletteInfo.catalogId,\n        id = paletteInfo.id,\n        paletteName = paletteInfo.paletteName;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const response = await fetch(url);\n  const palette = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your palette \"${paletteName}\" could not be retrieved at this time. :(`);\n  }\n\n  return palette;\n};\nexport const delettePalette = async paletteInfo => {\n  const catalog_id = paletteInfo.catalog_id,\n        id = paletteInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalog_id}/palettes/${id}`;\n  const options = {\n    method: 'DELETE'\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Catalog could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const deleteCatalog = async catalogInfo => {\n  const user_id = catalogInfo.user_id,\n        id = catalogInfo.id;\n  const url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}`;\n  const options = {\n    method: 'DELETE'\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Catalog could not be removed at this time.');\n  }\n\n  return response.json();\n};\nexport const userLogin = async userLogin => {\n  const url = 'https://picasso-database.herokuapp.com/api/v1/login';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userLogin)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return response.json();\n};\nexport const colorFormats = async rgbColors => {\n  const response = await fetch(`https://www.thecolorapi.com/id?format=string&rgb=${rgbColors[0]},${rgbColors[1]},${rgbColors[2]}`);\n  const colorInfo = response.json();\n  return colorInfo;\n};\nexport const getFiveColors = (updateColors, colorsRequest, model = 'default') => {\n  const url = 'https://colormind.io/api/';\n  const data = {\n    model: model\n  };\n\n  if (colorsRequest) {\n    data.input = colorsRequest;\n  }\n\n  var http = new XMLHttpRequest();\n\n  http.onreadystatechange = async () => {\n    if (http.readyState === 4 && http.status === 200) {\n      var palettes = await JSON.parse(http.responseText).result;\n      cleanColorName(updateColors, palettes);\n    }\n  };\n\n  http.open('POST', url, true);\n  http.send(JSON.stringify(data));\n};","map":{"version":3,"sources":["/Users/edwin/dev/picasso/picasso-fe/src/util/apiCalls.js"],"names":["cleanColorName","createUser","newUser","url","options","method","headers","body","JSON","stringify","response","fetch","ok","json","createPalette","newPalette","catalog_id","user_id","paletteName","colorsToString","colors","newPaletteForDB","savePalette","catalogId","id","Error","saveCatalog","newCatalog","getCatalogs","userInfo","catalogs","getCatalog","catalogInfo","userId","catalogName","catalog","getPalettes","palettes","getPalette","paletteInfo","palette","delettePalette","deleteCatalog","userLogin","colorFormats","rgbColors","colorInfo","getFiveColors","updateColors","colorsRequest","model","data","input","http","XMLHttpRequest","onreadystatechange","readyState","status","parse","responseText","result","open","send"],"mappings":"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","sourcesContent":["import { cleanColorName } from './cleanerFunctions.js';\n\nexport const createUser = async newUser => {\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/users';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newUser)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\treturn response;\n\t}\n\treturn response.json();\n};\n\nexport const createPalette = async newPalette => {\n\tconst { catalog_id, user_id, paletteName, colorsToString } = newPalette;\n\tlet colors = JSON.stringify(colorsToString);\n\tconst newPaletteForDB = { catalog_id, paletteName, colors };\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${catalog_id}/palettes`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newPaletteForDB)\n\t};\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\treturn response;\n\t}\n\treturn response.json();\n};\n\nexport const savePalette = async newPalette => {\n\tconst { catalogId, id } = newPalette;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newPalette)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Palette could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const saveCatalog = async newCatalog => {\n\tconst { user_id } = newCatalog;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newCatalog)\n\t};\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Catalog could not be saved at this time.');\n\t}\n\treturn response;\n};\n\nexport const getCatalogs = async userInfo => {\n\tconst { id } = userInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${id}/catalogs`;\n\tconst response = await fetch(url);\n\tconst catalogs = response.json();\n\tif (!response.ok) {\n\t\treturn response;\n\t}\n\treturn catalogs;\n};\n\nexport const getCatalog = async catalogInfo => {\n\tconst { userId, id, catalogName } = catalogInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${userId}/catalogs/${id}`;\n\tconst response = await fetch(url);\n\tconst catalog = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn catalog;\n};\n\nexport const getPalettes = async catalogInfo => {\n\tconst { user_id, id } = catalogInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}/palettes`;\n\tconst response = await fetch(url);\n\tconst palettes = response.json();\n\tif (!response.ok) {\n\t\treturn palettes;\n\t}\n\treturn palettes;\n};\n\nexport const getPalette = async paletteInfo => {\n\tconst { catalogId, id, paletteName } = paletteInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst response = await fetch(url);\n\tconst palette = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your palette \"${paletteName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn palette;\n};\n\nexport const delettePalette = async paletteInfo => {\n\tconst { catalog_id, id } = paletteInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/0/catalogs/${catalog_id}/palettes/${id}`;\n\tconst options = {\n\t\tmethod: 'DELETE'\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Catalog could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const deleteCatalog = async catalogInfo => {\n\tconst { user_id, id } = catalogInfo;\n\tconst url = `https://picasso-database.herokuapp.com/api/v1/users/${user_id}/catalogs/${id}`;\n\tconst options = {\n\t\tmethod: 'DELETE'\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Catalog could not be removed at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const userLogin = async userLogin => {\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/login';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(userLogin)\n\t};\n\tconst response = await fetch(url, options);\n\n\tif (!response.ok) {\n\t\treturn response;\n\t}\n\treturn response.json();\n};\n\nexport const colorFormats = async rgbColors => {\n\tconst response = await fetch(\n\t\t`https://www.thecolorapi.com/id?format=string&rgb=${rgbColors[0]},${rgbColors[1]},${rgbColors[2]}`\n\t);\n\tconst colorInfo = response.json();\n\treturn colorInfo;\n};\n\nexport const getFiveColors = (\n\tupdateColors,\n\tcolorsRequest,\n\tmodel = 'default'\n) => {\n\tconst url = 'https://colormind.io/api/';\n\tconst data = {\n\t\tmodel: model\n\t};\n\tif (colorsRequest) {\n\t\tdata.input = colorsRequest;\n\t}\n\tvar http = new XMLHttpRequest();\n\thttp.onreadystatechange = async () => {\n\t\tif (http.readyState === 4 && http.status === 200) {\n\t\t\tvar palettes = await JSON.parse(http.responseText).result;\n\t\t\tcleanColorName(updateColors, palettes);\n\t\t}\n\t};\n\thttp.open('POST', url, true);\n\thttp.send(JSON.stringify(data));\n};\n"]},"metadata":{},"sourceType":"module"}
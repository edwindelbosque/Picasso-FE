{"ast":null,"code":"import { colorFormats } from '../util/apiCalls.js';\nexport const cleanColorName = async (updateColors, palettes) => {\n  const colorInfo = await palettes.map(color => colorFormats(color));\n  const promiseResolve = await Promise.all(colorInfo);\n  const cleanedColorData = promiseResolve.map(colorObj => {\n    const XYZ = colorObj.XYZ,\n          cmyk = colorObj.cmyk,\n          hex = colorObj.hex,\n          hsl = colorObj.hsl,\n          hsv = colorObj.hsv,\n          rgb = colorObj.rgb,\n          name = colorObj.name;\n    return {\n      XYZ,\n      cmyk,\n      hex,\n      hsl,\n      hsv,\n      rgb,\n      name\n    };\n  });\n  updateColors(cleanedColorData);\n};","map":{"version":3,"sources":["/Users/edwin/dev/picasso/picasso-fe/src/util/cleanerFunctions.js"],"names":["colorFormats","cleanColorName","updateColors","palettes","colorInfo","map","color","promiseResolve","Promise","all","cleanedColorData","colorObj","XYZ","cmyk","hex","hsl","hsv","rgb","name"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAOC,YAAP,EAAqBC,QAArB,KAAkC;AAC/D,QAAMC,SAAS,GAAG,MAAMD,QAAQ,CAACE,GAAT,CAAaC,KAAK,IAAIN,YAAY,CAACM,KAAD,CAAlC,CAAxB;AACA,QAAMC,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYL,SAAZ,CAA7B;AACA,QAAMM,gBAAgB,GAAGH,cAAc,CAACF,GAAf,CAAmBM,QAAQ,IAAI;AAAA,UAC/CC,GAD+C,GACPD,QADO,CAC/CC,GAD+C;AAAA,UAC1CC,IAD0C,GACPF,QADO,CAC1CE,IAD0C;AAAA,UACpCC,GADoC,GACPH,QADO,CACpCG,GADoC;AAAA,UAC/BC,GAD+B,GACPJ,QADO,CAC/BI,GAD+B;AAAA,UAC1BC,GAD0B,GACPL,QADO,CAC1BK,GAD0B;AAAA,UACrBC,GADqB,GACPN,QADO,CACrBM,GADqB;AAAA,UAChBC,IADgB,GACPP,QADO,CAChBO,IADgB;AAEvD,WAAO;AAAEN,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA,GAAb;AAAkBC,MAAAA,GAAlB;AAAuBC,MAAAA,GAAvB;AAA4BC,MAAAA,GAA5B;AAAiCC,MAAAA;AAAjC,KAAP;AACA,GAHwB,CAAzB;AAIAhB,EAAAA,YAAY,CAACQ,gBAAD,CAAZ;AACA,CARM","sourcesContent":["import { colorFormats } from '../util/apiCalls.js';\n\nexport const cleanColorName = async (updateColors, palettes) => {\n\tconst colorInfo = await palettes.map(color => colorFormats(color));\n\tconst promiseResolve = await Promise.all(colorInfo);\n\tconst cleanedColorData = promiseResolve.map(colorObj => {\n\t\tconst { XYZ, cmyk, hex, hsl, hsv, rgb, name } = colorObj;\n\t\treturn { XYZ, cmyk, hex, hsl, hsv, rgb, name };\n\t});\n\tupdateColors(cleanedColorData);\n};\n"]},"metadata":{},"sourceType":"module"}
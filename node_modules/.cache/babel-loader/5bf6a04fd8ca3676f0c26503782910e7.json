{"ast":null,"code":"import { cleanColorName } from './cleanerFunctions.js';\nexport const createUser = async newUser => {\n  const url = 'https://picasso-database.herokuapp.com/api/v1/users';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newUser)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    console.log('hit error in apiCalls line 13', response);\n    return response; // throw new Error('User could not be created at this time.');\n  }\n\n  return response.json();\n};\nexport const savePalette = async newPalette => {\n  const catalogId = newPalette.catalogId,\n        id = newPalette.id;\n  const url = `http://localhost:3000/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPalette)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Palette could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const saveCatalog = async newCatalog => {\n  const userId = newCatalog.userId,\n        id = newCatalog.id;\n  const url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}`;\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newCatalog)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    throw new Error('Catalog could not be saved at this time.');\n  }\n\n  return response.json();\n};\nexport const getCatalogs = async userInfo => {\n  const id = userInfo.id;\n  const url = `http://localhost:3000/api/v1/users/${id}/catalogs`;\n  const response = await fetch(url);\n  const catalogs = response.json();\n\n  if (!response.ok) {\n    throw new Error('Catalogs could not be retrieved at this time.');\n  }\n\n  return catalogs;\n};\nexport const getCatalog = async catalogInfo => {\n  const userId = catalogInfo.userId,\n        id = catalogInfo.id,\n        catalogName = catalogInfo.catalogName;\n  const url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}`;\n  const response = await fetch(url);\n  const catalog = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`);\n  }\n\n  return catalog;\n};\nexport const getPalettes = async catalogInfo => {\n  const userId = catalogInfo.userId,\n        id = catalogInfo.id;\n  const url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}/palettes`;\n  const response = await fetch(url);\n  const palettes = response.json();\n\n  if (!response.ok) {\n    throw new Error('Palettes could not be retrieved at this time.');\n  }\n\n  return palettes;\n};\nexport const getPalette = async paletteInfo => {\n  const catalogId = paletteInfo.catalogId,\n        id = paletteInfo.id,\n        paletteName = paletteInfo.paletteName;\n  const url = `http://localhost:3000/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n  const response = await fetch(url);\n  const palette = response.json();\n\n  if (!response.ok) {\n    throw new Error(`Your palette \"${paletteName}\" could not be retrieved at this time. :(`);\n  }\n\n  return palette;\n};\nexport const userLogin = async userLogin => {\n  console.log('userLogin', userLogin);\n  const url = 'https://picasso-database.herokuapp.com/api/v1/login';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userLogin)\n  };\n  const response = await fetch(url, options);\n\n  if (!response.ok) {\n    return response;\n  }\n\n  return response.json();\n};\nexport const colorFormats = async rgbColors => {\n  const response = await fetch(`https://www.thecolorapi.com/id?format=string&rgb=${rgbColors[0]},${rgbColors[1]},${rgbColors[2]}`);\n  const colorInfo = response.json();\n  return colorInfo;\n};\nexport const getFiveColors = (updateArrayOfColors, colorsRequest, model = 'default') => {\n  const url = \"http://colormind.io/api/\";\n  const data = {\n    model: model\n  };\n\n  if (colorsRequest) {\n    data.input = colorsRequest;\n  }\n\n  var http = new XMLHttpRequest();\n\n  http.onreadystatechange = async () => {\n    if (http.readyState == 4 && http.status == 200) {\n      var palettes = await JSON.parse(http.responseText).result;\n      cleanColorName(updateArrayOfColors, palettes);\n    }\n  };\n\n  http.open(\"POST\", url, true);\n  http.send(JSON.stringify(data));\n};","map":{"version":3,"sources":["/Users/edwin/dev/picasso/picasso-fe/src/util/apiCalls.js"],"names":["cleanColorName","createUser","newUser","url","options","method","headers","body","JSON","stringify","response","fetch","ok","console","log","json","savePalette","newPalette","catalogId","id","Error","saveCatalog","newCatalog","userId","getCatalogs","userInfo","catalogs","getCatalog","catalogInfo","catalogName","catalog","getPalettes","palettes","getPalette","paletteInfo","paletteName","palette","userLogin","colorFormats","rgbColors","colorInfo","getFiveColors","updateArrayOfColors","colorsRequest","model","data","input","http","XMLHttpRequest","onreadystatechange","readyState","status","parse","responseText","result","open","send"],"mappings":"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","sourcesContent":["import { cleanColorName } from './cleanerFunctions.js'\n\nexport const createUser = async newUser => {\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/users';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newUser)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tconsole.log('hit error in apiCalls line 13', response);\n\t\t\n\t\treturn response\n\t\t// throw new Error('User could not be created at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const savePalette = async newPalette => {\n\tconst { catalogId, id } = newPalette;\n\tconst url = `http://localhost:3000/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newPalette)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Palette could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const saveCatalog = async newCatalog => {\n\tconst { userId, id } = newCatalog;\n\tconst url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}`;\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(newCatalog)\n\t};\n\n\tconst response = await fetch(url, options);\n\tif (!response.ok) {\n\t\tthrow new Error('Catalog could not be saved at this time.');\n\t}\n\treturn response.json();\n};\n\nexport const getCatalogs = async userInfo => {\n\tconst { id } = userInfo;\n\tconst url = `http://localhost:3000/api/v1/users/${id}/catalogs`;\n\tconst response = await fetch(url);\n\tconst catalogs = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error('Catalogs could not be retrieved at this time.');\n\t}\n\treturn catalogs;\n};\n\nexport const getCatalog = async catalogInfo => {\n\tconst { userId, id, catalogName } = catalogInfo;\n\tconst url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}`;\n\tconst response = await fetch(url);\n\tconst catalog = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your catalog \"${catalogName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn catalog;\n};\n\nexport const getPalettes = async catalogInfo => {\n\tconst { userId, id } = catalogInfo;\n\tconst url = `http://localhost:3000/api/v1/users/${userId}/catalogs/${id}/palettes`;\n\tconst response = await fetch(url);\n\tconst palettes = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error('Palettes could not be retrieved at this time.');\n\t}\n\treturn palettes;\n};\n\nexport const getPalette = async paletteInfo => {\n\tconst { catalogId, id, paletteName } = paletteInfo;\n\tconst url = `http://localhost:3000/api/v1/users/0/catalogs/${catalogId}/palettes/${id}`;\n\tconst response = await fetch(url);\n\tconst palette = response.json();\n\tif (!response.ok) {\n\t\tthrow new Error(\n\t\t\t`Your palette \"${paletteName}\" could not be retrieved at this time. :(`\n\t\t);\n\t}\n\treturn palette;\n};\n\nexport const userLogin = async userLogin => {\n\tconsole.log('userLogin', userLogin);\n\t\n\tconst url = 'https://picasso-database.herokuapp.com/api/v1/login';\n\tconst options = {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(userLogin)\n\t};\n\tconst response = await fetch(url, options);\n\t\n\tif (!response.ok) {\n\t\treturn response\n\t}\n\treturn response.json();\n}\n\nexport const colorFormats = async rgbColors => {\n\tconst response = await fetch(`https://www.thecolorapi.com/id?format=string&rgb=${rgbColors[0]},${rgbColors[1]},${rgbColors[2]}`)\n\tconst colorInfo = response.json();\n\treturn colorInfo\n  }\n\nexport const getFiveColors = (updateArrayOfColors, colorsRequest, model = 'default') => {\n\tconst url = \"http://colormind.io/api/\";\n\tconst data = {\n\t\tmodel : model,\n\t}\n\tif (colorsRequest) {\n\t\tdata.input = colorsRequest\n\t}\n\tvar http = new XMLHttpRequest();\n\thttp.onreadystatechange = async () => {\n\t\tif(http.readyState == 4 && http.status == 200) {\n\t\t\tvar palettes = await JSON.parse(http.responseText).result;\n\t\t\tcleanColorName(updateArrayOfColors, palettes)\n\t\t}\n\t}\n\thttp.open(\"POST\", url, true);\n\thttp.send(JSON.stringify(data));\n  }"]},"metadata":{},"sourceType":"module"}
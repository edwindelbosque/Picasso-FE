{"ast":null,"code":"import _slicedToArray from \"/Users/edwin/dev/picasso/picasso-fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/edwin/dev/picasso/picasso-fe/src/components/LoginForm/LoginForm.js\";\nimport React, { useState } from 'react';\nimport { userLogin, getCatalogs, getPalettes } from '../../util/apiCalls.js';\nimport './LoginForm.scss';\n\nconst LoginForm = ({\n  updateCurrentUser,\n  toggleMenu,\n  fetchCatalogs,\n  updateArrayOfColors\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailValue = _useState2[0],\n        handleEmailChange = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        passwordValue = _useState4[0],\n        handlePasswordChange = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loginStatus = _useState6[0],\n        handleLoginAttempt = _useState6[1];\n\n  const fetchPalettes = async (loginResponse, catalogsForFetch) => {\n    if (loginResponse.id && catalogsForFetch.length) {\n      const allPalettes = catalogsForFetch.map(async catalog => {\n        return await getPalettes(catalog);\n      });\n      const allResolvedPalettes = await Promise.all(allPalettes);\n      return allResolvedPalettes.flat();\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    handleLoginAttempt('');\n    const newUser = {\n      email: emailValue,\n      password: passwordValue\n    };\n    const loginResponse = await userLogin(newUser);\n    const catalogs = await getCatalogs(loginResponse);\n    const palettes = await fetchPalettes(loginResponse, catalogs);\n\n    if (loginResponse.error) {\n      handleLoginAttempt(loginResponse.error);\n    } else {\n      updateCurrentUser(loginResponse, catalogs, palettes);\n      resetInputs();\n      toggleMenu(false);\n    }\n  };\n\n  const resetInputs = () => {\n    handleEmailChange('');\n    handlePasswordChange('');\n    handleLoginAttempt('');\n  };\n\n  const checkEmail = () => {\n    const emailSplit = emailValue.split('');\n    const startIncludesSearch = emailSplit.findIndex(character => character === '@');\n    return emailSplit.includes('@') && emailSplit.includes('.', startIncludesSearch) ? true : false;\n  };\n\n  const canBeSubmitted = () => {\n    return checkEmail() && passwordValue.length > 6;\n  };\n\n  const isEnabled = canBeSubmitted();\n  return React.createElement(\"form\", {\n    className: \"LoginForm\",\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    className: \"form-login email-login__label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    className: \"emailForm\",\n    id: \"email\",\n    type: \"text\",\n    name: \"email\",\n    placeholder: \"ex. hello@email.com\",\n    onChange: e => handleEmailChange(e.target.value),\n    value: emailValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    className: \"form-login password-login__label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    className: \"emailForm\",\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"ex. \\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\\u2022\",\n    onChange: e => handlePasswordChange(e.target.value),\n    value: passwordValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"loginFormBtn\",\n    disabled: !isEnabled,\n    onClick: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Login\"));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/edwin/dev/picasso/picasso-fe/src/components/LoginForm/LoginForm.js"],"names":["React","useState","userLogin","getCatalogs","getPalettes","LoginForm","updateCurrentUser","toggleMenu","fetchCatalogs","updateArrayOfColors","emailValue","handleEmailChange","passwordValue","handlePasswordChange","loginStatus","handleLoginAttempt","fetchPalettes","loginResponse","catalogsForFetch","id","length","allPalettes","map","catalog","allResolvedPalettes","Promise","all","flat","handleSubmit","event","preventDefault","newUser","email","password","catalogs","palettes","error","resetInputs","checkEmail","emailSplit","split","startIncludesSearch","findIndex","character","includes","canBeSubmitted","isEnabled","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { userLogin, getCatalogs, getPalettes } from '../../util/apiCalls.js';\nimport './LoginForm.scss';\n\nconst LoginForm = ({\n\tupdateCurrentUser,\n\ttoggleMenu,\n\tfetchCatalogs,\n\tupdateArrayOfColors\n}) => {\n\tconst [emailValue, handleEmailChange] = useState('');\n\tconst [passwordValue, handlePasswordChange] = useState('');\n\tconst [loginStatus, handleLoginAttempt] = useState('');\n\n\tconst fetchPalettes = async (loginResponse, catalogsForFetch) => {\n\t\tif (loginResponse.id && catalogsForFetch.length) {\n\t\t\tconst allPalettes = catalogsForFetch.map(async catalog => {\n\t\t\t\treturn await getPalettes(catalog);\n\t\t\t});\n\t\t\tconst allResolvedPalettes = await Promise.all(allPalettes);\n\t\t\treturn allResolvedPalettes.flat();\n\t\t}\n\t};\n\n\tconst handleSubmit = async event => {\n\t\tevent.preventDefault();\n\t\thandleLoginAttempt('');\n\t\tconst newUser = { email: emailValue, password: passwordValue };\n\t\tconst loginResponse = await userLogin(newUser);\n\t\tconst catalogs = await getCatalogs(loginResponse);\n\t\tconst palettes = await fetchPalettes(loginResponse, catalogs);\n\t\tif (loginResponse.error) {\n\t\t\thandleLoginAttempt(loginResponse.error);\n\t\t} else {\n\t\t\tupdateCurrentUser(loginResponse, catalogs, palettes);\n\t\t\tresetInputs();\n\t\t\ttoggleMenu(false);\n\t\t}\n\t};\n\n\tconst resetInputs = () => {\n\t\thandleEmailChange('');\n\t\thandlePasswordChange('');\n\t\thandleLoginAttempt('');\n\t};\n\n\tconst checkEmail = () => {\n\t\tconst emailSplit = emailValue.split('');\n\t\tconst startIncludesSearch = emailSplit.findIndex(\n\t\t\tcharacter => character === '@'\n\t\t);\n\t\treturn emailSplit.includes('@') &&\n\t\t\temailSplit.includes('.', startIncludesSearch)\n\t\t\t? true\n\t\t\t: false;\n\t};\n\n\tconst canBeSubmitted = () => {\n\t\treturn checkEmail() && passwordValue.length > 6;\n\t};\n\n\tconst isEnabled = canBeSubmitted();\n\n\treturn (\n\t\t<form className='LoginForm' onSubmit={e => handleSubmit(e)}>\n\t\t\t<label htmlFor='email' className='form-login email-login__label'>\n\t\t\t\tEmail\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\tclassName='emailForm'\n\t\t\t\tid='email'\n\t\t\t\ttype='text'\n\t\t\t\tname='email'\n\t\t\t\tplaceholder='ex. hello@email.com'\n\t\t\t\tonChange={e => handleEmailChange(e.target.value)}\n\t\t\t\tvalue={emailValue}\n\t\t\t/>\n\t\t\t<label htmlFor='password' className='form-login password-login__label'>\n\t\t\t\tPassword\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\tclassName='emailForm'\n\t\t\t\tid='password'\n\t\t\t\ttype='password'\n\t\t\t\tname='password'\n\t\t\t\tplaceholder='ex. •••••••••••'\n\t\t\t\tonChange={e => handlePasswordChange(e.target.value)}\n\t\t\t\tvalue={passwordValue}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tclassName='loginFormBtn'\n\t\t\t\tdisabled={!isEnabled}\n\t\t\t\tonClick={e => handleSubmit(e)}>\n\t\t\t\tLogin\n\t\t\t</div>\n\t\t</form>\n\t);\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}